import type { ClientStatusForAchievement } from './client-status-data-type'
import type { PomodoroStatus } from './techniques/pomodoro-status-data-type'

export type StatusForAchievements = ClientStatusForAchievement & PomodoroStatus
export interface ClientStatusForAchievement {
  currentTimeOfDay: number // // 0〜86399999 (0時0分0秒0ミリ秒から23時59分59秒999ミリ秒)
}

export interface PomodoroStatus {
  totalCompletedSessions: number
  consecutivePerfectSessions: number
  maxCustomSessionMs: number
  consecutiveDaysCompleted: number
  totalTasksCompletedWithPomodoro: number
  totalFocusedMs: number
}

import type { AchievementConditionParts } from './achievement-condition-parts-data-type'

/**
 * 個々の条件定義
 */
interface AchievementCondition {
  id: string // 論理式内で参照される、この条件の一意な識別子
  condition: AchievementConditionParts
}

/**
 * 論理演算子の種類
 */
type LogicalOperator = 'and' | 'or'

/**
 * 条件ロジックツリーのノード
 * 複数の条件をAND/ORで結合するために使用
 */
interface LogicNode {
  operator: LogicalOperator // このノードの論理演算子 ('and' または 'or')
  children: (string | LogicNode)[] // 論理式の要素。stringはAchievementConditionのid、LogicNodeはネストした論理式
}

/**
 * アチーブメントの解除条件全体を定義する構造
 */
export interface AchievementUnlockConditions {
  conditions: AchievementCondition[] // 個々の条件のリスト
  logic: LogicNode // これらの条件を組み合わせて評価するための論理ツリーのルート
}
import type { StatusForAchievements } from './status/status-for-achievements'

/**
 * 条件比較に使用する演算子
 */
export type ComparisonOperator = 'eq' | 'gte' | 'lte' | 'lt' | 'gt' | 'ne'

export type ConditionDataSource = 'client' | 'server'

/**
 * クライアントサイドで判定される時間ベースの条件
 * ユーザーデバイスのローカル時刻や、特定タイムスタンプの日中時刻部分を比較
 */
interface TimeCondition {
  field: 'currentTimeOfDay' // 今後現在の時間以外の時間フィールドにアクセスする場合に追加
  targetTimeMs: number // 0〜86399999 (0時0分0秒0ミリ秒から23時59分59秒999ミリ秒)
  operator: ComparisonOperator
}

/**
 * サーバーサイド（Firestore）の数値データで判定される条件
 */
interface NumberCondition {
  field: keyof StatusForAchievements // Firestoreドキュメント内のフィールドパス（例: 'status.totalCompletedSessions'）
  borderValue: number // 比較する境界値
  operator: ComparisonOperator
}

/**
 * サーバーサイド（Firestore）の真偽値データで判定される条件
 */
interface BooleanCondition {
  field: keyof StatusForAchievements // Firestoreドキュメント内のフィールドパス（例: 'isVisible'）
  expectedValue: boolean // 期待する真偽値
}

export type AchievementConditionParts =
  | TimeCondition
  | NumberCondition
  | BooleanCondition

import type { TechniqueId } from '../../../technique/types/data/technique-id-types'
import type { AchievementUnlockConditions } from './achievement-unlock-conditions-data-type'

/**
 * アチーブメントのレアリティ
 */
export type AchievementRarity =
  | 'common'
  | 'uncommon'
  | 'rare'
  | 'epic'
  | 'legendary'

/**
 * 各アチーブメントの静的な情報
 */
export interface AchievementStaticInfo {
  docId: string // FirestoreのドキュメントIDとして使用される、アチーブメントの一意な識別子（例: Firestoreの自動生成ID）
  order: number // アチーブメントの表示順序を決定する数値（小数点可、間隔を空けて設定推奨）
  techniqueId: TechniqueId // このアチーブメントが関連するテクニックのID
  rarity: AchievementRarity // アチーブメントのレアリティ
  iconId: string // アチーブメント表示に使用するアイコンのID
  name: string // アチーブメントの名称
  unlockConditions: AchievementUnlockConditions // アチーブメントの解放条件を定義する構造
  unlockConditionsExplanation: string // ユーザーに表示される解放条件の説明文（例: 'ポモドーロを10回完了する'）
  description: string // アチーブメントの詳細な説明
}
